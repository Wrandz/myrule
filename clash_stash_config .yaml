# 包含 Stash 和 Clash 的完整配置示例
# 所有配置字段都是 Stash 和 Clash 共同支持的，相互不支持的部分已做单独说明
# 使用 Stash 应当删除 Stash 尚不支持的部分 Clash 设置，使用 Clash (Clash for Windows / ClashX) 应当删除 Stash 创造的只有 Stash 支持的部分设置
# https://raw.githubusercontent.com/STASH-NETWORKS-LIMITED/stash-example/main/config.yaml
# https://lancellc.gitbook.io/clash/clash-config-file/an-example-configuration-file


# --------------------------------------------------
# Clash 相关配置，Stash 文档未注明支持

# Port of HTTP(S) proxy server on the local end
port: 7890

# Port of SOCKS5 proxy server on the local end
socks-port: 7891

# Transparent proxy server port for Linux and macOS (Redirect TCP and TProxy UDP)
# redir-port: 7892

# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
# tproxy-port: 7893

# HTTP(S) and SOCKS4(A)/SOCKS5 server on the same port
# mixed-port: 7890

# authentication of local SOCKS5/HTTP(S) server
# authentication:
#  - "user1:pass1"
#  - "user2:pass2"

# Set to true to allow connections to the local-end server from other LAN IP addresses
allow-lan: false

# This is only applicable when `allow-lan` is `true`
# '*': bind all IP addresses
# 192.168.122.11: bind a single IPv4 address
# "[aaaa::a8aa:ff:fe09:57d8]": bind a single IPv6 address
bind-address: '*'

# Clash 内核的外部控制端口，这里没加 secret
# https://github.com/Dreamacro/clash-dashboard/tree/gh-pages
# 下载编译好的 clash-dashboard 放置于指定目录，即可外部浏览器访问
external-controller : 0.0.0.0:9090
external-ui : /root/clashui

# --------------------------------------------------

# Clash 路由工作模式
# 规则模式：rule (规则) / global (全局代理) / direct (全局直连)
mode: rule

# Clash 默认将日志输出至 STDOUT
# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出)。
# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。
log-level: info

# --------------------------------------------------
# Stash 相关配置，Clash 文档未注明支持

# 改写与 MitM 相关 (Beta)
http:
  # 强制使用 Stash Engine 以 HTTP 协议处理 TCP 连接
  # 捕获后的连接可以使用高级功能，例如重写和脚本
  force-http-engine:
    - "*:80"
    - "*:4480" # BiliBili CDN
    - "*:9102" # BiliBili CDN

  # 以 PKCS #12 编码的 CA 证书
  # 此处表示自定义的 CA 证书，若使用 Stash GUI 界面的 CA 证书安装，配置文件中无需设置，留空即可，Stash 会自动填充
  ca: ""
  # 证书密码
  ca-passphrase: ""
  # 开启 MitM 功能的域名列表，需要确保上述 CA 证书已受系统信任
  mitm:
    - g.cn
    - "*.google.cn"
    - weather-data.apple.com # 默认只对 443 端口开启
    - weather-data.apple.com:* # 使用通配符对所有端口开启
    - "*.weather-data.apple.com" # 域名中也可以使用通配符
  # HTTP(S) 重写，支持header、302、307、reject多种策略
  rewrite:
    - ^http://g\.cn http://www.google.com header # 重写请求头的域名
    - ^https?://www\.google\.cn https://www.google.com 302 # 直接返回一个 302 重定向的响应
    - ^https?://ad\.example - reject # 拒绝请求
  # 使用 JavaScript 脚本改写 HTTP(S) 请求
  script:
    - match: https://weather-data.apple.com/v2/weather/[\w-]+/-?[0-9]+\.[0-9]+/-?[0-9]+\.[0-9]+\?
      name: weather-us-aqi # 引用script-providers中的脚本
      type: response # 脚本类型：request / response
      require-body: true # 如果需要 request / response body，请设置为 true
      timeout: 10 # script timeout in second (optional)

script-providers:
  weather-us-aqi:
    # 远程资源模式
    # 基本上订阅别人已经写好的就够了
    url: https://raw.githubusercontent.com/STASH-NETWORKS-LIMITED/stash-example/main/script/iOS15_Weather_AQI_Standard.js
    interval: 86400
  rewrite:
    # inline模式，仅推荐作为开发使用
    # 注意rewrite也是name，不是关键词
    content: >
      $httpClient.get(
        {
          url: "https://httpbin.org/anything",
          headers: {
            "content-type": "application/json",
          },
          body: "{}",
        },
        function (error, response, body) {
          if (error) {
            console.log(error);
            $done();
            return;
          }
          console.log(response.status);
          console.log(JSON.stringify(response.headers));
          console.log(body);
          $done({ body });
        }
      );

# --------------------------------------------------

# Clash 的 Script Shortcut，让 user 可以在 Rule 模式下使用部分 Script 的功能
script:
  shortcuts: # 使用 Python 脚本编写自定义规则
    # 4483 与 9305 为 BiliBili 的 QUIC CDN
    quic: network == 'udp' and (dst_port == 443 or dst_port == 4483 or dst_port == 9305) # 可以在 rule 中引用
# 使用方法为在下面的 rules 里面添加如下内容：
# rules:
#   - SCRIPT,quic,REJECT

# DNS 服务器和建立连接时的静态 Hosts, 行为类似于/etc/hosts，仅在 dns.enhanced-mode 模式为 redir-host 生效
# 支持通配符域名 (例如: *.clash.dev, *.foo.*.example.com)
# 不使用通配符的域名优先级高于使用通配符的域名 (例如: foo.example.com > *.example.com > .example.com)
# 注意: +.foo.com 的效果等同于 .foo.com 和 foo.com
# 只有需要的时候再开启
hosts:
  '*.clash.dev': 127.0.0.1
  '.dev': 127.0.0.1
  'alpha.clash.dev': '::1'

profile:
  # Store the `select` results in $HOME/.config/clash/.cache
  # set false If you don't want this behavior
  # when two different configurations have groups with the same name, the selected values are shared
  store-selected: false

  # persistence fakeip
  store-fake-ip: true

# DNS 服务器配置 (可选；若不配置，程序内置的 DNS 服务会被关闭)
dns:

# --------------------------------------------------
# Clash 相关配置，Stash 文档未注明支持

# Stash 只要配置了 dns 字段，就打开 dns 功能，而 Clash 单独设置了开关命令和侦听端口，以及对 IPV6 的支持
  enable: false
  listen: 0.0.0.0:53
  # ipv6: false # when the false, response to AAAA questions will be empty

# --------------------------------------------------

  # 以下填写的 DNS 服务器将会被用来解析 DNS 服务的域名，这是因为 doh 类型的加密 DNS 查询本身需要用明文的 IP 类型的 DNS 服务器来解析其真实地址
  # 例如用 223.5.5.5 来解析 https://dns.alidns.com/dns-query 的真实地址，然后向其发送加密 DNS 查询
  # 仅填写 DNS 服务器的 IP 地址
  default-nameserver:
    - 223.5.5.5
    - 114.114.114.114
    - system # 使用 iOS 系统 DNS ，注意 Clash 并不支持 system 字段
  # 支持 UDP / TCP / DoT / DoH 协议的 DNS 服务，可以指明具体的连接端口号。
  # 所有 DNS 请求将会直接发送到服务器，不经过任何代理。
  # Clash 会使用最先获得的解析记录回复 DNS 请求
  nameserver:
    # 不建议配置超过 2 个 DNS 服务器，会增加系统功耗
    - 114.114.114.114 # Clash default value
    - 8.8.8.8 # Clash default value
    - tls://dns.rubyfish.cn:853 # DNS over TLS
    - dhcp://en0 # DNS from DHCP ，Clash 文档中指定的类型，Stash 文档中并未注明支持
    - https://doh.pub/dns-query # DNS over HTTPS
    - https://dns.alidns.com/dns-query
    - quic://dns.adguard.com:784 # Stash 文档中指定的类型，Clash 文档中并未注明支持
    - system # 使用 iOS 系统 DNS ，Clash 文档并未注明支持 system 类型

  # 对部分域名使用单独的 DNS 服务器
  nameserver-policy:
    "www.baidu.com": 114.114.114.114 # Clash 文档中的用法为 'www.baidu.com': '114.114.114.114'，使用单引号
    "+.internal.crop.com": system # system 类型，Clash 文档并未注明支持 system 类型

# --------------------------------------------------
# Clash 相关配置，Stash 文档未注明支持

  enhanced-mode: fake-ip # or redir-host
  fake-ip-range: 198.18.0.1/16 # Fake IP addresses pool CIDR
  use-hosts: true # lookup hosts and return IP record

# --------------------------------------------------

  # 在以下列表的域名将不会被解析为 fake ip，这些域名相关的解析请求将会返回它们真实的 IP 地址
  fake-ip-filter:
    # 以下域名列表参考自 vernesong/OpenClash 项目，并由 Hackl0us 整理补充
    - "*.lan"
    - "*.localdomain"
    - "*.example"
    - "*.invalid"
    - "*.localhost"
    - "*.test"
    - "*.local"
    - "*.home.arpa"
    - "time.*.com"
    - "time.*.gov"
    - "time.*.edu.cn"
    - "time.*.apple.com"
    - "time1.*.com"
    - "time2.*.com"
    - "time3.*.com"
    - "time4.*.com"
    - "time5.*.com"
    - "time6.*.com"
    - "time7.*.com"
    - "ntp.*.com"
    - "ntp1.*.com"
    - "ntp2.*.com"
    - "ntp3.*.com"
    - "ntp4.*.com"
    - "ntp5.*.com"
    - "ntp6.*.com"
    - "ntp7.*.com"
    - "*.time.edu.cn"
    - "*.ntp.org.cn"
    - "+.pool.ntp.org"
    - "time1.cloud.tencent.com"
    - "music.163.com"
    - "*.music.163.com"
    - "*.126.net"
    - "musicapi.taihe.com"
    - "music.taihe.com"
    - "songsearch.kugou.com"
    - "trackercdn.kugou.com"
    - "*.kuwo.cn"
    - "api-jooxtt.sanook.com"
    - "api.joox.com"
    - "joox.com"
    - "y.qq.com"
    - "*.y.qq.com"
    - "streamoc.music.tc.qq.com"
    - "mobileoc.music.tc.qq.com"
    - "isure.stream.qqmusic.qq.com"
    - "dl.stream.qqmusic.qq.com"
    - "aqqmusic.tc.qq.com"
    - "amobile.music.tc.qq.com"
    - "*.xiami.com"
    - "*.music.migu.cn"
    - "music.migu.cn"
    - "*.msftconnecttest.com"
    - "*.msftncsi.com"
    - "msftconnecttest.com"
    - "msftncsi.com"
    - "localhost.ptlogin2.qq.com"
    - "localhost.sec.qq.com"
    - "+.srv.nintendo.net"
    - "+.stun.playstation.net"
    - "xbox.*.microsoft.com"
    - "xnotify.xboxlive.com"
    - "+.battlenet.com.cn"
    - "+.wotgame.cn"
    - "+.wggames.cn"
    - "+.wowsgame.cn"
    - "+.wargaming.net"
    - "proxy.golang.org"
    - "stun.*.*"
    - "stun.*.*.*"
    - "+.stun.*.*"
    - "+.stun.*.*.*"
    - "+.stun.*.*.*.*"
    - "heartbeat.belkin.com"
    - "*.linksys.com"
    - "*.linksyssmartwifi.com"
    - "*.router.asus.com"
    - "mesu.apple.com"
    - "swscan.apple.com"
    - "swquery.apple.com"
    - "swdownload.apple.com"
    - "swcdn.apple.com"
    - "swdist.apple.com"
    - "lens.l.google.com"
    - "stun.l.google.com"
    - "+.nflxvideo.net"
    - "*.square-enix.com"
    - "*.finalfantasyxiv.com"
    - "*.ffxiv.com"

# --------------------------------------------------
# Clash 相关配置，Stash 文档未注明支持

# When `fallback` is present, the DNS server will send concurrent requests to the servers 
# in this section along with servers in `nameservers`.
# The answers from fallback servers are used when the GEOIP country is not `CN`.
  fallback:
    - tcp://1.1.1.1

# If IP addresses resolved with servers in `nameservers` are in the specified subnets below,
# they are considered invalid and results from `fallback` servers are used instead.
# 'the specified subnet below' is 'ipcidr' and 'domain'.

# IP address resolved with servers in `nameserver` is used when `fallback-filter.geoip` is true
# and when GEOIP of the IP address is `CN`.

# If `fallback-filter.geoip` is false, results from `nameserver` nameservers are always used
# if not match `fallback-filter.ipcidr`.

# This is a countermeasure against DNS pollution attacks.
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 240.0.0.0/4
    domain:
      - '+.google.com'
      - '+.facebook.com'
      - '+.youtube.com'

# --------------------------------------------------

proxies:
  # shadowsocks
  # 支持加密方式：
  #   aes-128-gcm aes-192-gcm aes-256-gcm
  #   aes-128-cfb aes-192-cfb aes-256-cfb
  #   aes-128-ctr aes-192-ctr aes-256-ctr
  #   rc4-md5 chacha20 chacha20-ietf xchacha20
  #   chacha20-ietf-poly1305 xchacha20-ietf-poly1305

  - name: "ss1"
    type: ss
    server: server
    port: 443
    cipher: chacha20-ietf-poly1305
    password: "password"
    # udp: true

  - name: "ss2"
    type: ss
    server: server
    port: 443
    cipher: AEAD_CHACHA20_POLY1305
    password: "password"
    plugin: obfs
    plugin-opts:
      mode: tls # 混淆模式，可以选择 http 或 tls
      host: bing.com # 混淆域名，需要和服务器配置保持一致

  - name: "ss3"
    type: ss
    server: server
    port: 443
    cipher: AEAD_CHACHA20_POLY1305
    password: "password"
    plugin: v2ray-plugin
    plugin-opts:
      mode: websocket # 暂时不支持 QUIC 协议
      # tls: true # wss
      # skip-cert-verify: true
      # host: bing.com
      # path: "/"
      # headers:
      #   custom: value

  # vmess
  # 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none

  - name: "vmess"
    type: vmess
    server: server
    port: 443
    uuid: d0529668-8835-11ec-a8a3-0242ac120002
    alterId: 32
    cipher: auto
    # udp: true
    # tls: true
    # skip-cert-verify: true
    # servername: example.com # 优先级高于 wss host
    # network: ws
    # ws-opts:
    #   path: /path
    #   headers:
    #     Host: v2ray.com
    #   max-early-data: 2048
    #   early-data-header-name: Sec-WebSocket-Protocol

  - name: "vmess-h2"
    type: vmess
    server: server
    port: 443
    uuid: d0529668-8835-11ec-a8a3-0242ac120002
    alterId: 32
    cipher: auto
    network: h2
    tls: true
    h2-opts:
      host:
        - http.example.com
        - http-alt.example.com
      path: /

  - name: "vmess-http"
    type: vmess
    server: server
    port: 443
    uuid: d0529668-8835-11ec-a8a3-0242ac120002
    alterId: 32
    cipher: auto
    # udp: true
    # network: http
    # http-opts:
    #   # method: "GET"
    #   # path:
    #   #   - '/'
    #   #   - '/video'
    #   # headers:
    #   #   Connection:
    #   #     - keep-alive

  - name: "vmess-grpc"
    server: server
    port: 443
    type: vmess
    uuid: d0529668-8835-11ec-a8a3-0242ac120002
    alterId: 32
    cipher: auto
    network: grpc
    tls: true
    servername: example.com
    # skip-cert-verify: true
    grpc-opts:
      grpc-service-name: "example"

  # socks5

  - name: "socks"
    type: socks5
    server: server
    port: 443
    # username: username
    # password: password
    # tls: true
    # skip-cert-verify: true
    # udp: true

  # http
  - name: "http"
    type: http
    server: server
    port: 443
    # username: username
    # password: password
    # tls: true # https
    # skip-cert-verify: true

  # snell
  - name: "snell"
    type: snell
    server: server
    port: 44046
    psk: yourpsk
    udp: true # 需要 v3 以上服务端
    version: 3
    # obfs-opts:
    # mode: http # 或 tls
    # host: bing.com

  # Trojan
  - name: "trojan"
    type: trojan
    server: server
    port: 443
    password: yourpsk
    # udp: true
    # sni: example.com # Server Name Indication，如果空会使用 server 中的值
    # alpn:
    #   - h2
    #   - http/1.1
    # skip-cert-verify: true

# --------------------------------------------------
# Stash 相关配置，Clash 文档未注明支持

  - name: trojan-grpc
    server: server
    port: 443
    type: trojan
    password: "example"
    network: ws
    sni: example.com
    # skip-cert-verify: true
    udp: true
    # ws-opts:
      # path: /path
      # headers:
      #   Host: example.com

# --------------------------------------------------

# --------------------------------------------------
# Stash 相关配置，Clash 文档未注明支持

  # hysteria https://github.com/HyNetwork/hysteria/wiki/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95
  - name: "hysteria"
    type: hysteria
    server: server
    port: 443
    up-speed: 100 # 上传带宽（单位：Mbps）
    down-speed: 100 # 下载带宽（单位：Mbps）
    # auth: "" # bytes encoded in base64
    # obfs: ""
    # obfs-protocol: "" # wechat-video or blank
    # udp: true
    # sni: example.com # Server Name Indication，如果空会使用 server 中的值
    # alpn:
    #   - hysteria
    # skip-cert-verify: true

# --------------------------------------------------

  # ShadowsocksR
  # 支持的加密方式: SS 中支持的所有流加密方式
  # 支持的混淆方式:
  #   plain http_simple http_post
  #   random_head tls1.2_ticket_auth tls1.2_ticket_fastauth
  # 支持的协议:
  #   origin auth_sha1_v4 auth_aes128_md5
  #   auth_aes128_sha1 auth_chain_a auth_chain_b
  - name: "ssr"
    type: ssr
    server: server
    port: 443
    cipher: chacha20-ietf
    password: "password"
    obfs: tls1.2_ticket_auth
    protocol: auth_sha1_v4
    # obfs-param: domain.tld
    # protocol-param: "#"
    # udp: true

# --------------------------------------------------
# Stash 相关配置，Clash 文档未注明支持

  - name: "vless"
    type: vless
    server: server
    port: 443
    uuid: d0529668-8835-11ec-a8a3-0242ac120002
    # flow: xtls-rprx-direct
    # skip-cert-verify: true
    # network: h2
    # tls: true
    # ws-opts:
    #   path: /path
    #   headers:
    #     Host: v2ray.com
    # grpc-opts:
    #   grpc-service-name: "example"
    # h2-opts:
    #   host:
    #     - http.example.com
    #     - http-alt.example.com
    #   path: /

# --------------------------------------------------

proxy-groups:
  # 代理的转发链, 在 proxies 中不应该包含 relay. 不支持 UDP.
  # 流量: clash <-> http <-> vmess <-> ss1 <-> ss2 <-> 互联网
  - name: "relay"
    type: relay
    icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Direct.png
    proxies:
      - http
      - vmess
      - ss1
      - ss2

  # url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器
  - name: "auto"
    type: url-test
    proxies:
      - ss1
      - ss2
      - vmess
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器
  - name: "fallback-auto"
    type: fallback
    proxies:
      - ss1
      - ss2
      - vmess
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # load-balance 可以使相同 eTLD 请求在同一条代理线路上
  - name: "load-balance"
    type: load-balance
    proxies:
      - ss1
      - ss2
      - vmess
    url: "http://www.gstatic.com/generate_204"
    interval: 300

  # select 用来允许用户手动选择 代理服务器 或 服务器组
  # 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用
  - name: Proxy
    type: select
    proxies:
      - ss1
      - ss2
      - vmess
      - auto

# --------------------------------------------------
# Stash 相关配置，Clash 文档未注明支持

  # 基于 SSID 的策略，方便在特殊网络环境下使用特定的代理
  - name: ssid-group
    type: select # 类型必须为 select，兼容原版 clash 配置
    proxies:
      - ss1
      - ss2
      - DIRECT
    ssid-policy:
      # 在 SSID 为 office 的 Wi-Fi 中自动切换为 ss1 策略
      # 在 SSID 为 home 的 Wi-Fi 中自动切换为 ss2 策略
      # 其他的 SSID 以及蜂窝数据，默认为 DIRECT
      office: ss1
      home: ss2
      default: DIRECT

# --------------------------------------------------

# --------------------------------------------------
# Clash 相关配置，Stash 文档未注明支持

  # direct to another infacename
  - name: en1
    type: select
    interface-name: en1
    proxies:
      - DIRECT

# --------------------------------------------------

  - name: UseProvider
    type: select
    use:
      - provider1
    proxies:
      - Proxy
      - DIRECT



proxy-providers:

# --------------------------------------------------
# Stash 相关配置，是 Clash 文档的子集，完整 Clash 文档配置下面给出

  provider1:
    url: https://raw.githubusercontent.com/STASH-NETWORKS-LIMITED/stash-example/main/config.yaml
    interval: 3600
    health-check:
      enable: true
      interval: 600
      url: http://www.gstatic.com/generate_204

# --------------------------------------------------

# --------------------------------------------------
# Clash 文档中的完整配置

  provider1:
    type: http
    url: "url"
    interval: 3600
    path: ./provider1.yaml
    health-check:
      enable: true
      interval: 600
      # lazy: true
      url: http://www.gstatic.com/generate_204
  test:
    type: file
    path: /test.yaml
    health-check:
      enable: true
      interval: 36000
      url: http://www.gstatic.com/generate_204

# --------------------------------------------------

# 目前 Clash Premium Core 支持 filter，Stash 当然也支持，不过文档中都未提及
# 锚点是 YAML 的语法支持
  #全部节点
  All: &All #建立锚点
    type: http
    url: "https://api.v1.mk/sub?target=clash&url=你的订阅链接&list=true&udp=true"
    # 可以使用任意类型的链接替换上面文字，多个链接使用英文符号的竖杠|隔开一起写上即可
    # subconverter 后端链接
    interval: 3600
    path: ./all.yaml
    health-check:
      enable: true
      interval: 600
      url: http://www.gstatic.com/generate_204

  #美国节点    
  US:
    <<: *All #引用锚点内容
    filter: 美|🇺🇲|US|(?i)States|American
    
  #香港节点
  HK:
    <<: *All
    filter: 港|🇭🇰|HK|(?i)Hong

  #日本节点
  JP:
    <<: *All
    filter: 日|🇯🇵|东京|JP|(?i)Japan
 
  #台湾节点
  TW:
    <<: *All
    filter: 台|🇨🇳|🇹🇼|湾|TW|(?i)Taiwan

rule-providers:
  # 下面的配置都是 Stash 文档中的配置，相比而言，Clash 文档中的配置多了 type 和 path 两个字段
  proxy-domain:
    behavior: domain # 使用 domain 类规则集，可以使匹配更高效
    url: https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt
    interval: 86400

  proxy-domain-text:
    behavior: domain-text # 推荐使用 text 格式
    url: https://cdn.jsdelivr.net/gh/Loyalsoldier/surge-rules@release/proxy.txt
    interval: 86400

  lan-cidr:
    behavior: ipcidr
    url: https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt
    interval: 86400

  ip-cidr-text:
    behavior: ipcidr-text
    url: https://cdn.jsdelivr.net/gh/17mon/china_ip_list@master/china_ip_list.txt
    interval: 86400

  apple-direct:
    behavior: classical # 不推荐使用 classical 类规则集
    url: "https://cdn.jsdelivr.net/gh/Hackl0us/SS-Rule-Snippet@master/Rulesets/Clash/Basic/Apple-direct.yaml"
    interval: 3600

rules:
  - DOMAIN-SUFFIX,google.com,Proxy
  - DOMAIN-KEYWORD,google,Proxy
  - DOMAIN,google.com,Proxy
  - DOMAIN-SUFFIX,ad.com,REJECT
  - SRC-IP-CIDR,192.168.1.201/32,DIRECT
  # optional param "no-resolve" for IP rules (GEOIP, IP-CIDR, IP-CIDR6)
  - IP-CIDR,127.0.0.0/8,DIRECT
  - DST-PORT,80,DIRECT
  - SRC-PORT,7777,DIRECT
  - SCRIPT,quic,REJECT
  - RULE-SET,proxy-domain,Proxy
  - RULE-SET,apple-direct,DIRECT
  - RULE-SET,lan-cidr,DIRECT
  - RULE-SET,ip-cidr-text,DIRECT
  - GEOIP,CN,DIRECT
  - MATCH,Proxy
